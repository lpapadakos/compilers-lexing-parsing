/* Part 2: Parser */

/**
 *  Package and Import Specifications
 */
import java_cup.runtime.*;
import java.util.regex.*;

/**
 *  Usercode Components
 */
action code {:
  /* Find identifiers in function string, write out in Java format */
  String javaFunc(String funcString) {
		Pattern reg = Pattern.compile("[A-Za-z][A-Za-z0-9_]*");
		Matcher identifier = reg.matcher(funcString);

		identifier.find();
		StringBuilder result = new StringBuilder(identifier.group() + "(");

    /* This part is useful for function declarations, where the arguments are included in yytext() */
		if (identifier.find())
			result.append("String " + identifier.group());

		while (identifier.find())
			result.append(", String " + identifier.group());

		return result.toString();
	}
:}

parser code {:
    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }
:}

/* define how to connect to the scanner! */
scan with {: return s.next_token(); :};

/**
 *  Symbol Lists
 */

/* Terminals (tokens returned by the scanner). */
terminal               IF, ELSE, PREFIX, SUFFIX, PLUS, COMMA, RPAREN, RCURLY;
terminal String        IDENTIFIER, FCALL, FDEF, STRING_LITERAL;

/*  Non terminals */
non terminal           program;
non terminal String    def_list, def, def_expr, def_call, def_call_args, def_cond;
non terminal String    expr_list, expr, call, call_args, cond;

/**
 *  Precedence Declarations
 */
//TODO: Check precedence
precedence left PREFIX, SUFFIX;
precedence left PLUS;
precedence nonassoc IF, ELSE;

/**
 *  The Grammar Rules
 */


program       ::= def_list:d expr_list:e                             {:System.out.println("public class Main {");
                                                                       System.out.println("\tpublic static void main(String[] args) {");
                                                                       System.out.printf("%s", e);
                                                                       System.out.println("\t}");
                                                                       System.out.printf("%s", d);
                                                                       System.out.println("}");
                                                                     :}
                ;

/* First Part: Function Declarations */
def_list      ::= def_list:rest def:f                                {: RESULT = String.format("%s\n%s\n", rest, f); :}
                |                                                    {: RESULT = ""; :}
                ;
def           ::= FDEF:f def_expr:e RCURLY                           {: RESULT = String.format("\tpublic static String %s) {\n\t\treturn %s;\n\t}", javaFunc(f), e); :}
                ;
/* Variable identifiers only allowed inside function definitions...
 * Otherwise expr, call, call_args, cond would've been enough */
def_expr      ::= def_call:f                                         {: RESULT = f; :}
                | IF def_cond:c RPAREN def_expr:e1 ELSE def_expr:e2  {: RESULT = String.format("(%s ? %s : %s)", c, e1, e2); :}
                | def_expr:e1 PLUS def_expr:e2                       {: RESULT = e1 + " + " + e2; :}
                | IDENTIFIER:i                                       {: RESULT = i; :}
                | STRING_LITERAL:s                                   {: RESULT = "\"" + s + "\""; :}
                ;
/* Function call inside a definition, can have identifier as argument */
def_call      ::= FCALL:f def_call_args:a RPAREN                     {: RESULT = javaFunc(f) + a + ')'; :}
                ;
def_call_args ::= def_call_args:rest COMMA def_expr:e                {: RESULT = rest + ", " + e; :}
                | def_expr:e                                         {: RESULT = e; :}
                |                                                    {: RESULT = ""; :}
                ;
def_cond      ::= def_expr:e1 PREFIX def_expr:e2                     {: RESULT = String.format("(%s).startsWith(%s)", e2, e1); :}
                | def_expr:e1 SUFFIX def_expr:e2                     {: RESULT = String.format("(%s).endsWith(%s)", e2, e1); :}
                ;

/* Second Part: List of expressions to print (they all are/return Strings) */
expr_list     ::= expr_list:rest expr:e                              {: RESULT = String.format("%s\t\tSystem.out.println(%s);\n", rest, e); :}
                |                                                    {: RESULT = ""; :}
                ;
//TODO parentheses for complex expr?
expr          ::= call:f                                             {: RESULT = f; :}
                | IF cond:c RPAREN expr:e1 ELSE expr:e2              {: RESULT = String.format("(%s ? %s : %s)", c, e1, e2); :}
                | expr:e1 PLUS expr:e2                               {: RESULT = e1 + " + " + e2; :}
                | STRING_LITERAL:s                                   {: RESULT = "\"" + s + "\""; :}
                ;
call          ::= FCALL:f call_args:a RPAREN                         {: RESULT = javaFunc(f) + a + ')'; :}
                ;
call_args     ::= call_args:rest COMMA expr:e                        {: RESULT = rest + ", " + e; :}
                | expr:e                                             {: RESULT = e; :}
                |                                                    {: RESULT = ""; :}
                ;
cond          ::= expr:e1 PREFIX expr:e2                             {: RESULT = String.format("(%s).startsWith(%s)", e2, e1); :}
                | expr:e1 SUFFIX expr:e2                             {: RESULT = String.format("(%s).endsWith(%s)", e2, e1); :}
                ;
