/* Part 2: Parser */

/**
 *  Package and Import Specifications
 */
import java_cup.runtime.*;

/**
 *  Usercode Components
 */
parser code {:
    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }
:}

/* define how to connect to the scanner! */
scan with {: return s.next_token(); :};

/**
 *  Symbol Lists
 */

/* Terminals (tokens returned by the scanner). */
terminal            IF, ELSE, PREFIX, SUFFIX, LPAREN, COMMA, RPAREN, LCURLY, PLUS, RCURLY;
terminal String     IDENTIFIER, STRING_LITERAL;

/*  Non terminals */
non terminal           program;
non terminal String    funcdef_list, funcdef, expr;      // used to store evaluated subexpressions

/**
 *  Precedence Declarations
 */
//precedence IF
precedence left PLUS;

/**
 *  The Grammar Rules
 */

program      ::= funcdef_list:f {:
                                System.out.println("public class Main {");
                                System.out.println("\tpublic static void main(String[] args) {");
                                System.out.printf("%s", f);
                                System.out.println("\t}");
                                System.out.println("}");
                                :}
	           ;
funcdef_list ::= funcdef_list:rest funcdef:f                        {: RESULT = String.format("%s\n\t\t%s", rest, f); :}
               |                                                    {: RESULT = ""; :}
               ;
funcdef      ::= IDENTIFIER:i LPAREN RPAREN LCURLY expr:e RCURLY    {: RESULT = String.format("public static String %s() {\n\treturn %s; }\n", i, e); :}
               ;
expr         ::= STRING_LITERAL:s                                   {: RESULT = String.format("\"%s\"", s); :}
               ;
