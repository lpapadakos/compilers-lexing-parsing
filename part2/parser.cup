/* Part 2: Parser */

/**
 *  Package and Import Specifications
 */
import java_cup.runtime.*;

/**
 *  Usercode Components
 */
parser code {:
    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }
:}

/* define how to connect to the scanner! */
scan with {: return s.next_token(); :};

/**
 *  Symbol Lists
 */

/* Terminals (tokens returned by the scanner). */
terminal            IF, ELSE, PREFIX, SUFFIX, LPAREN, COMMA, RPAREN, LCURLY, PLUS, RCURLY;
terminal String     IDENTIFIER, STRING_LITERAL;

/*  Non terminals */
non terminal           program;
non terminal String    funcdef_list, funcdef, funcdef_args, funcdef_args_list, funccall_list, funccall, funccall_args, funccall_args_list, expr, cond;

/**
 *  Precedence Declarations
 */
precedence left LCURLY;

precedence left PLUS;
precedence left PREFIX, SUFFIX;

/**
 *  The Grammar Rules
 */

program           ::= funcdef_list:defs funccall_list:calls {:
                                    System.out.println("public class Main {");
                                    System.out.println("\tpublic static void main(String[] args) {");
                                    System.out.printf("%s", calls);
                                    System.out.println("\t}");
                                    System.out.printf("%s", defs);
                                    System.out.println("}");
                                    :}
                    ;

funcdef_list      ::= funcdef_list:rest funcdef:f                        {: RESULT = String.format("%s%s", rest, f); :}
                    |                                                    {: RESULT = ""; :}
                    ;
funcdef           ::= IDENTIFIER:i LPAREN funcdef_args:a RPAREN LCURLY expr:e RCURLY    {: RESULT = String.format("\tpublic static String %s(%s) {\n\t\treturn %s;\n\t}\n\n", i, a, e); :}
                    ;
funcdef_args      ::= funcdef_args_list:a                                {: RESULT = a; :}
                    |                                                    {: RESULT = ""; :}
                    ;
funcdef_args_list ::= funcdef_args_list:rest COMMA IDENTIFIER:i          {: RESULT = String.format("%s, String %s", rest, i); :}
                    | IDENTIFIER:i                                       {: RESULT = String.format("String %s", i); :}
                    ;

funccall_list     ::= funccall_list:rest funccall:f                      {: RESULT = String.format("%s%s", rest, f); :}
                    |                                                    {: RESULT = ""; :}
                    ;
funccall          ::= IDENTIFIER:i LPAREN funccall_args:a RPAREN         {: RESULT = String.format("\t\t%s(%s)\n\n", i, a); :}
                    ;
funccall_args     ::= funccall_args_list:a                               {: RESULT = a; :}
                    |                                                    {: RESULT = ""; :}
                    ;
funccall_args_list ::= funccall_args_list:rest COMMA expr:e              {: RESULT = String.format("%s, %s", rest, e); :}
                    | expr:e                                             {: RESULT = e; :}
                    ;

expr              ::= funccall
                    | IF LPAREN cond RPAREN expr ELSE expr
                    | expr:e1 PLUS expr:e2                               {: RESULT = String.format("%s + %s", e1, e2); :}
                    | IDENTIFIER:i                                       {: RESULT = i; :}
                    | STRING_LITERAL:s                                   {: RESULT = String.format("\"%s\"", s); :}
                    ;
cond              ::= expr:e1 PREFIX expr:e2
                    | expr:e1 SUFFIX expr:e2
                    ;
